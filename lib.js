// Generated by CoffeeScript 1.12.7
(function() {
  var CombinedStream, DEFLATE_END, DEFLATE_END_LENGTH, DeflateCRC32Stream, DeflatePartStream, GZIP_HEADER, _, crcUtils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  crcUtils = require('resin-crc-utils');

  CombinedStream = require('combined-stream');

  DeflateCRC32Stream = require('crc32-stream').DeflateCRC32Stream;

  GZIP_HEADER = new Buffer([0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff]);

  DEFLATE_END = new Buffer([0x03, 0x00]);

  DEFLATE_END_LENGTH = DEFLATE_END.length;

  DeflatePartStream = (function(superClass) {
    extend(DeflatePartStream, superClass);

    function DeflatePartStream() {
      this.buf = new Buffer(0);
      DeflatePartStream.__super__.constructor.apply(this, arguments);
    }

    DeflatePartStream.prototype.push = function(chunk) {
      if (chunk !== null) {
        if (chunk.length >= DEFLATE_END_LENGTH) {
          DeflatePartStream.__super__.push.call(this, this.buf);
          return this.buf = chunk;
        } else {
          return this.buf = Buffer.concat([this.buf, chunk]);
        }
      } else {
        if (this.buf.length >= DEFLATE_END_LENGTH && this.buf.slice(-DEFLATE_END_LENGTH).equals(DEFLATE_END)) {
          this.buf = this.buf.slice(0, -DEFLATE_END_LENGTH);
        }
        DeflatePartStream.__super__.push.call(this, this.buf);
        return DeflatePartStream.__super__.push.call(this, null);
      }
    };

    DeflatePartStream.prototype.end = function() {
      return this.flush((function(_this) {
        return function() {
          return DeflatePartStream.__super__.end.call(_this);
        };
      })(this));
    };

    DeflatePartStream.prototype.metadata = function() {
      return {
        crc: this.digest(),
        len: this.size(),
        zLen: this.size(true)
      };
    };

    return DeflatePartStream;

  })(DeflateCRC32Stream);

  exports.createDeflatePart = function() {
    return new DeflatePartStream();
  };

  exports.createGzipFromParts = function(parts) {
    var i, len, len1, out, stream;
    out = CombinedStream.create();
    out.append(GZIP_HEADER);
    for (i = 0, len1 = parts.length; i < len1; i++) {
      stream = parts[i].stream;
      out.append(stream);
    }
    out.append(DEFLATE_END);
    out.append(crcUtils.crc32_combine_multi(parts).combinedCrc32.slice(0, 4));
    len = new Buffer(4);
    len.writeUInt32LE(_.sum(_.pluck(parts, 'len')), 0);
    out.append(len);
    out.zLen = _.sum(_.pluck(parts, 'zLen')) + 20;
    return out;
  };

}).call(this);
